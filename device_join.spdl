usertype  NonceRequest;
usertype JoinRequest;
usertype RequestApproved;
usertype LeaveRequest;
usertype Reputation;
usertype UniqueID;
usertype EncryptionSecret;
usertype OldID;
hashfunction h;
usertype TimeStamp;
usertype xor;
# C,A,B are device addresses

protocol Block(C,A,D,B)
{
    role C
    {
        fresh nc: Nonce;
        var na,nb,nd: Nonce;
        fresh Tc: TimeStamp;
        var Tb,Ta,Td: TimeStamp;
	var Sec: EncryptionSecret;
	var UID: UniqueID;
	var RApp: RequestApproved;
	fresh NReq: NonceRequest;
	fresh LReq: LeaveRequest;
	fresh OID: OldID;
	fresh JReq: JoinRequest;
	fresh Rep: Reputation;

        send_1(C,A, {{NReq,OID,nc,Tc,C}sk(A)}pk(C) );
        recv_2(A,C, {{Ta,na,h(na,nc,Tc)}pk(C)}pk(A) );
	claim(C,Running,A,na,nc);
	send_3(C,D, {{LReq,C,Tc,nc,na}sk(D)}pk(C) );
	recv_4(D,C, {{RApp,D,nd,h(nc,nd)}sk(C)}pk(D));
	send_6(C,B, {JReq,C,nc,Rep,Tc,{h(na,Ta)}sk(B)}pk(C) );
	recv_7(B,C, {{RApp,UID,Sec,nb,Tb}sk(C)}pk(B) );

        claim(C,Secret,nc);
        claim(C,Secret,na);
	#claim(C,Alive);
        #claim(C,Weakagree);
        #claim(C,Commit,A,na,nc);
        claim(C,Niagree);
	claim(C,Nisynch);
    }

    role A
    {
        fresh na: Nonce;
        var nb,nc: Nonce;
        fresh Ta: TimeStamp;
        var Tc,Tb,Tc: TimeStamp;
	var NReq: NonceRequest;
	fresh LReq: LeaveRequest;
	var OID: OldID;

        recv_1(C,A, {{NReq,OID,nc,Tc,C}sk(A)}pk(C) );
	claim(A,Running,C,nc);
        send_2(A,C, {{Ta,na,h(na,nc,Tc)}pk(C)}pk(A) );
        send_5(A,B, {{LReq,C,OID,na,nc}sk(B)}pk(A) );

	claim(A,Running,B,na);
        claim(A,Secret,na);
        claim(A,Secret,nc);
	#claim(A,Alive);
        #claim(A,Weakagree);
        #claim(A,Commit,C,nc,na);
        claim(A,Niagree);
	claim(A,Nisynch);
    }

    role D
    {
        var na,nc: Nonce;
	fresh nd: Nonce;
        fresh Td: TimeStamp;
        var Tc: TimeStamp;
	var OldID: OldID;
	var JReq: JoinRequest;
	var Rep: Reputation;
	fresh RApp: RequestApproved;
	var LReq: LeaveRequest;
	fresh UID: UniqueID;
	fresh Sec: EncryptionSecret;

	recv_3(C,D, {{LReq,C,Tc,nc,na}sk(D)}pk(C) );
	claim(D,Running,C,nc);
	send_4(D,C, {{RApp,D,nd,h(nc,nd)}sk(C)}pk(D));

        claim(D,Secret,na);
	#claim(D,Alive);
        #claim(D,Weakagree);
        #claim(D,Commit,C,nc,nd);
        claim(D,Niagree);
	claim(D,Nisynch);
    }
    
    role B
    {
        var na,nc,nd: Nonce;
	fresh nb: Nonce;
        fresh Tb: TimeStamp;
        var Ta,Tc: TimeStamp;
	var OID: OldID;
	var JReq: JoinRequest;
	var Rep: Reputation;
	var LReq: LeaveRequest;
	fresh RApp: RequestApproved;
	fresh UID: UniqueID;
	fresh Sec: EncryptionSecret;

	recv_5(A,B, {{LReq,C,OID,na,nc}sk(B)}pk(A) );
	recv_6(C,B, {JReq,C,nc,Rep,Tc,{h(na,Ta)}sk(B)}pk(C) ); #6
	send_7(B,C, {{RApp,UID,Sec,nb,Tb}sk(C)}pk(B) ); #7

        claim(B,Secret,na);
	#claim(B,Alive);
        #claim(B,Weakagree);
        #claim(B,Commit,A,na);
        #claim(B,Commit,C,na,nb);
        claim(B,Niagree);
	claim(B,Nisynch);
    }
}
